generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum Provider {
  Credential
  GOOGLE
  KAKAO
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Like          Like[]
  Comment       Comment[]
  sendFollow    Follow[]  @relation(name: "sendFollow")
  receiveFollow Follow[]  @relation(name: "receiveFollow")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  author    String
  content   String
  media     String
  mediaType String    @default("Image")
  hashtags  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  likes     Like[]
  comments  Comment[]
  user      User      @relation(fields: [userId], references: [id])
  userId    String
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Follow {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  sendUser      User     @relation(name: "sendFollow", fields: [sendUserId], references: [id])
  receiveUser   User     @relation(name: "receiveFollow", fields: [receiveUserId], references: [id])
  sendUserId    String
  receiveUserId String
}
